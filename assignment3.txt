Author: Jose Gomez
Nova Southeastern University
June 20th 2015
CISC 630
Assignment 3

Written Assignment 3
1. (4.2.1) Consider the context-free grammar:
S -> S S + | S S * | a

and the string aa+a*.
a) Give a leftmost derivation for the string.
S -> SS* -> SS+S* -> aS+S* -> aa+S* -> aa+a*

b) Give a rightmost derivation for the string.
S -> SS* -> Sa* -> SS+a* -> Sa+a* -> aa+a*

c) Give a parse tree for the string.

        _S_
       / | \
      /  |  \
     S   S   *
    /|\  |
   S S + a
   | |
   a a

d) Is the grammar ambiguous or unambiguous? Justify your answer.
The grammar is unambiguous.

e) Describe the language generated by this grammar.
The grammar generates a language consisting of postfix addition or multiplication expressions of the letter a.

2. (4.2.2) Repeat Exercise 4.2.1 for each of the following grammars and strings.
a) S -> 0 S 1 | 0 1 with string 000111
- Leftmost derivation:
  S -> 0 S 1 -> 00 S 11 -> 000111

- Rightmost derivation:
  S -> 0 S 1 -> 00 S 11 -> 000111

- Parse tree:
              _S_
             / | \
            0  S  1
              /|\
             0 S 0
               |
               01

- The grammar is umanbiguous.
- The language generated by the grammar is the set of all strings of 0s followed by an equal number of 1s.

3. (4.2.3) Design grammars for the following languages.
a) The set of all strings of 0s and 1s such that every 0 is immediately followed by at least one 1.
S -> (0?1)*

b) The set of all strings of 0s and 1s that are palindromes; that is, the string reads the same backard as forward.
S -> 0 S 0 | 1 S 1 | 0 | 1 | epsilon

c) The set of all strings of 0s and 1s with an equal number of 0s and 1s.
S -> 0 S 1 S | 1 S 0 S | epsilon

4. (4.3.1) The following is a grammar for regular expressions over symbols a and b only, using + in place of | for union, to avoid conflict with the use of vertical bar as a metasymbol in grammars:
rexpr -> rexpr + rterm | rterm
rterm -> rterm rfactor | rfactor
rfactor -> rfactor * | rprimary
rprimary -> a | b

a) Left factor this grammar.
rexpr -> rexpr rexpr' | rterm
rexpr' -> + rterm
rterm -> rterm rterm' | rfactor
rterm' -> + rfactor
rfactor -> rfactor * | rprimary
rprimary -> a | b

b) Does left factoring make the grammar suitable for top-down parsing?
This is not suitable, because the grammar contains left recursion.

c) In addition to left factoring, eliminate left recursion from the original grammar.
rexpr -> rterm rexpr'
rexpr' -> + rterm rexpr' | epsilon
rterm -> rfactor rterm'
rterm' -> rfactor rterm' | epsilon
rfactor -> rprimary rfactor'
rfactor' -> * rfactor' | epsilon
rprimary -> a | b

d) Is the resulting grammar suitable for top-down parsing?
The grammar is suitable for top-down parsing.

References
Aho, A., Lam, M., Sethi, R., & Ullman, J. (2007). Compilers Principles, Techniques, &amp; Tools Gradiance (2nd ed.). Boston, MA: Addison-Wesley.
